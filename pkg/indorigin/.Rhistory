twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 1000.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, pM[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0))
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
library(indorigin)
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
7.56315 + 15.51787 + 68.86295
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
library(indorigin)
twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2])
94.62+5.37
library(indorigin)
(x = twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
sum(x[3:4])
(x = twoStateUnifSample(rM, 0, 1, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
sum(x[3:4])
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
sum(x[3:4])
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 10.0, two.state.trans.prob(0.02, 0.05,10.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
sum(x[3:4])
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
library(indorigin)
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 100.0, two.state.trans.prob(0.02, 0.05,100.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
sum(x[3:4])
(x = twoStateUnifSample(rM, 1, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 0, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 0, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
library(indorigin)
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
(x = twoStateUnifSample(rM, 1, 1, 1000.0, two.state.trans.prob(0.02, 0.05,1000.0)[1,2]))
library(indorigin)
library(indorigin)
twoStateRateMatrix(0.02,0.05)
rM
test.tree
library(indorigin)
library(indorigin)
require(diversitree)
set.seed(34344)
test.tree = tree.bisse(c(0.1, 0.1, 0.03, 0.03, 0.01, 0.07), x0=0, max.taxa = 50)
test.tree = reorder(test.tree, order = "pr")
test.tree$edges
test.tree$edge
library(indorigin)
library(indorigin)
library(indorigin)
library(indorigin)
statesize=2
tipcount=7
set.seed(892)
i<-statesize
numtips<-tipcount
phy<-NULL
while(is.null(phy)) phy<-tree.bd(c(.1, .03), max.taxa=numtips)
Q<-matrix(10*abs(rnorm(i^2)),nrow=i)
diag(Q)<-0
diag(Q)<-apply(-Q,1,sum)
dimQ<-dim(Q)[1]
q<-as.vector(t(Q))[-seq(from=1,to=(dimQ^2),by=(dimQ+1))]
pid<-rep(1/dimQ,dimQ)
x<-NULL
while(length(unique(x))<=1) x = sim.character(phy, pars=Q, x0=1, model="mkn", br=NULL)
lik <- make.mkn(phy, x[1:numtips], dimQ,strict=FALSE)
y = asr.stoch(lik, q)
z<-divtophy(phy,y)
y
library(diversitree)
library(phytools)
########################### going from diversitree format to phytools format: ####################################
##################################################################################################################
divtophymap<-function(phy,y){
tool<-phy
tool$orig<-NULL
tool$node.label<-NULL
tool$maps<-vector("list",dim(phy$edge)[1])
for(i in 1:(dim(phy$edge)[1])) tool$maps[[i]]<-onemapbranch(phy,y,i)
return(tool)
}
onemapbranch<-function(phy,y,i){
hist<-y$history[[i]]
hist2<-rbind(hist,c(phy$edge.length[i],hist[dim(hist)[1],2]))
returnme<-diff(hist2[,1])
names(returnme)<-hist[,2]
return(returnme)
}
nodestatesmake<-function(tool){
node.states<-tool$edge
for(i in 1:(dim(tool$edge)[1])) node.states[i,]<-c(as.integer(names(tool$maps[[i]])[1]),as.integer(names(tool$maps[[i]])[length(tool$maps[[i]])]))
tool$node.states<-node.states
return(tool)
}
statesmake<-function(tool){
states<-rep(0,length(tool$tip.label))
for(i in 1:length(tool$tip.label)) states[i]<-tool$node.states[,2][tool$edge[,2]==i]
tool$states<-states
return(tool)
}
makemappededge<-function(tree,pid){
numberofstates<-length(pid)
returnme<-matrix(rep(0,numberofstates*length(tree$maps)),nrow=length(tree$maps))
for(i in 1:length(tree$maps)){
for(j in 1:numberofstates){
returnme[i,j]<-sum(tree$maps[[i]][names(tree$maps[[i]])==j])
}
}
return(returnme)
}
divtophy<-function(phy,y){
tool<-divtophymap(phy,y)
tool<-nodestatesmake(tool)
tool<-statesmake(tool)
tool$mapped.edge<-makemappededge(tool,y$states)
return(tool)
}
##################################################################################################
##################################################################################################
######### create a 7 tip tree with a state space of size 2:
statesize=2
tipcount=7
set.seed(892)
i<-statesize
numtips<-tipcount
phy<-NULL
while(is.null(phy)) phy<-tree.bd(c(.1, .03), max.taxa=numtips)
Q<-matrix(10*abs(rnorm(i^2)),nrow=i)
diag(Q)<-0
diag(Q)<-apply(-Q,1,sum)
dimQ<-dim(Q)[1]
q<-as.vector(t(Q))[-seq(from=1,to=(dimQ^2),by=(dimQ+1))]
pid<-rep(1/dimQ,dimQ)
x<-NULL
while(length(unique(x))<=1) x = sim.character(phy, pars=Q, x0=1, model="mkn", br=NULL)
lik <- make.mkn(phy, x[1:numtips], dimQ,strict=FALSE)
y = asr.stoch(lik, q)
z<-divtophy(phy,y)
###############################################################################
########################### summary statistics ################################
###############################################################################
# 10,000 samples of the state history of the tree z yielded the following statistics
## number of transitions from state 1 to state 2
## Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
## 7.00   84.00   89.00   88.65    94.00  118.00
## number of transitions from state 2 to state 1
## Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
## 6.00   83.00   88.00   87.83    93.00  117.00
## amount of time spent in state 1
##  Min.  1st Qu.  Median    Mean  3rd Qu.    Max.
## 15.21    17.82   18.25   18.25    18.69   20.69
## amount of time spent in state2
##   Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
##  3.277   5.279   5.713   5.721    6.150   8.753
z
names()
names(z)
z$nodeStates
z$state
z$state
z$states
z.reordered = reorder(z, order = "pr")
z.reordered$states
z$edges
z$edge
z.reordered$edge
z.reordered$states
z.reordered$edge.lengths
z.reordered$edge.length
z.reordered$states-
1
Q
q
lik
x = twoStateSufficientStatistics(z$reordered$edge, z$reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z$reordered$edge, as.integer(z$reordered$states-1), z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(as.integer(z$reordered$edge), as.integer(z$reordered$states-1), z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
as.integer(z$reordered$edge)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
z.reordered$edge
z.reordered$states-1
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
z
library(indorigin)
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
z.reordered$edge
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
z.reordered$edge.length
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
twoStateRateMatrix(0.1,0.222)
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
library(indorigin)
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
x = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
x
simSize = 10
resultMat = matrix(0,simSize,4)
for(i in 1:10){
resultMat[i,] = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
}
resultMat
summary(resultMat)
simSize = 10000
resultMat = matrix(0,simSize,4)
for(i in 1:simSize){
resultMat[i,] = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
}
summary(resultMat)
simSize = 10000
resultMat = matrix(0,simSize,4)
for(i in 1:simSize){
resultMat[i,] = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
}
summary(resultMat)
hist(reultMat)
hist(resultMat)
hist(resultMat[,1])
hist(resultMat[,3])
hist(resultMat[,3], breaks=20)
hist(resultMat[,1], breaks=20)
hist(resultMat[,3], breaks=20)
library(indorigin)
simSize = 10000
resultMat = matrix(0,simSize,4)
for(i in 1:simSize){
resultMat[i,] = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
}
summary(resultMat)
library(indorigin)
library(indorigin)
library(indorigin)
library(indorigin)
TwoStatePhyloLikelihood(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(indorigin)
TwoStatePhyloLikelihood(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
library(diversitree)
library(phytools)
########################### going from diversitree format to phytools format: ####################################
##################################################################################################################
divtophymap<-function(phy,y){
tool<-phy
tool$orig<-NULL
tool$node.label<-NULL
tool$maps<-vector("list",dim(phy$edge)[1])
for(i in 1:(dim(phy$edge)[1])) tool$maps[[i]]<-onemapbranch(phy,y,i)
return(tool)
}
onemapbranch<-function(phy,y,i){
hist<-y$history[[i]]
hist2<-rbind(hist,c(phy$edge.length[i],hist[dim(hist)[1],2]))
returnme<-diff(hist2[,1])
names(returnme)<-hist[,2]
return(returnme)
}
nodestatesmake<-function(tool){
node.states<-tool$edge
for(i in 1:(dim(tool$edge)[1])) node.states[i,]<-c(as.integer(names(tool$maps[[i]])[1]),as.integer(names(tool$maps[[i]])[length(tool$maps[[i]])]))
tool$node.states<-node.states
return(tool)
}
statesmake<-function(tool){
states<-rep(0,length(tool$tip.label))
for(i in 1:length(tool$tip.label)) states[i]<-tool$node.states[,2][tool$edge[,2]==i]
tool$states<-states
return(tool)
}
makemappededge<-function(tree,pid){
numberofstates<-length(pid)
returnme<-matrix(rep(0,numberofstates*length(tree$maps)),nrow=length(tree$maps))
for(i in 1:length(tree$maps)){
for(j in 1:numberofstates){
returnme[i,j]<-sum(tree$maps[[i]][names(tree$maps[[i]])==j])
}
}
return(returnme)
}
divtophy<-function(phy,y){
tool<-divtophymap(phy,y)
tool<-nodestatesmake(tool)
tool<-statesmake(tool)
tool$mapped.edge<-makemappededge(tool,y$states)
return(tool)
}
##################################################################################################
##################################################################################################
######### create a 7 tip tree with a state space of size 2:
statesize=2
tipcount=7
set.seed(892)
i<-statesize
numtips<-tipcount
phy<-NULL
while(is.null(phy)) phy<-tree.bd(c(.1, .03), max.taxa=numtips)
Q<-matrix(10*abs(rnorm(i^2)),nrow=i)
diag(Q)<-0
diag(Q)<-apply(-Q,1,sum)
dimQ<-dim(Q)[1]
q<-as.vector(t(Q))[-seq(from=1,to=(dimQ^2),by=(dimQ+1))]
pid<-rep(1/dimQ,dimQ)
x<-NULL
while(length(unique(x))<=1) x = sim.character(phy, pars=Q, x0=1, model="mkn", br=NULL)
lik <- make.mkn(phy, x[1:numtips], dimQ,strict=FALSE)
y = asr.stoch(lik, q)
z<-divtophy(phy,y)
z.reordered = reorder(z, order = "pr")
simSize = 10000
resultMat = matrix(0,simSize,4)
for(i in 1:simSize){
resultMat[i,] = twoStateSufficientStatistics(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
}
summary(resultMat)
###############################################################################
########################### summary statistics ################################
###############################################################################
# 10,000 samples of the state history of the tree z yielded the following statistics
## number of transitions from state 1 to state 2
## Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
## 7.00   84.00   89.00   88.65    94.00  118.00
## number of transitions from state 2 to state 1
## Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
## 6.00   83.00   88.00   87.83    93.00  117.00
## amount of time spent in state 1
##  Min.  1st Qu.  Median    Mean  3rd Qu.    Max.
## 15.21    17.82   18.25   18.25    18.69   20.69
## amount of time spent in state2
##   Min. 1st Qu.  Median    Mean  3rd Qu.    Max.
##  3.277   5.279   5.713   5.721    6.150   8.753
TwoStatePhyloLikelihood(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
lik
lik(c(Q[1,2], Q[2,1]))
exp(lik(c(Q[1,2], Q[2,1])))
TwoStatePhyloLikelihood(z.reordered$edge, z.reordered$states-1, z.reordered$edge.length, Q[1,2], Q[2,1], c(0.5,0.5))
