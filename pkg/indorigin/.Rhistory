getPriorProb(testIndOriginResults2)
getPostProb(testIndOriginResults2)
plotPosterior(testIndOriginResults2)
log10(0.000000003370851)
install.packages("robustDist", repos="http://R-Forge.R-project.org", type="source")
install.packages("~/Downloads/robustDist_1.0.tar",type="source",repos=NULL)
install.packages("~/Desktop/robustDist_1.0.tar",type="source",repos=NULL)
session()
version()
sessioninfo()
sessionInfo()
library(bayessir)
resultspath<-getwd()
deltavalue=1
critical=5
numParticles=100
PopSize=150000
theMU=.0009
#load the data
data(COVMATP1)
data(COVMATP2)
data(obscholP1)
data(obscholP2)
data(obsdaysP1)
data(obsdaysP2)
trans=function(p){
c(log(p[1]),  #beta
log(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
logit(p[6]),#rho
log(p[7]),  #phiS
log(p[8]))  #phiI
}
invtrans=function(p){
c(exp(p[1]),  #beta
exp(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
expit(p[6]),#rho
exp(p[7]),  #phiS
exp(p[8]))  #phiI
}
#prior means
pbeta<-log(1.25e-07)
pgamma<-log(.1)
palpha1<-0
palpha2<-0
palpha0<--8
prho<-logit(.0008)
pphiS<-log(PopSize/2)
pphiI<-log(PopSize/10)
pmean=c(pbeta,pgamma,palpha0,palpha1,palpha2,prho,pphiS,pphiI)
#prior standard deviations
psd=c(5,    #beta
.09,  #gamma
5,    #alpha0
5,    #alpha1
5,    #alpha2
2,    #rho
.1,   #phiS
.5)   #phiI
constParIndex<-1:2
alphasIndex<-3:5
rhoIndex<-6
startmeansIndex<-7:8
burn = 1000
prelim = 5000
iters =100000
thin =10
tune=.85
psigma<-diag(c(0.00002, #beta
0.00002, #gamma
0.002,   #alpha0
0.02,    #alpha1
0.02,    #alpha2
0.0002,  #rho
0.02,    #phiS
0.02))   #phiI
th=c(
beta=1.25e-09,
gamma=.11,
alpha0=-7,
alpha1=1,
alpha2=-1,
rho=.00003,
phiS=PopSize*.5,
phiI=PopSize*.2)
ll=-50000
bayessir(resultspath,deltavalue,critical,PopSize,theMU,numParticles,
COVMATP1,COVMATP2,obscholP1,obscholP2,obsdaysP1,obsdaysP2,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma)
bayessir
remove.packages("bayessir", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(bayessir)
resultspath<-getwd()
deltavalue=1
critical=5
numParticles=100
PopSize=150000
theMU=.0009
#load the data
data(COVMATP1)
data(COVMATP2)
data(obscholP1)
data(obscholP2)
data(obsdaysP1)
data(obsdaysP2)
trans=function(p){
c(log(p[1]),  #beta
log(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
logit(p[6]),#rho
log(p[7]),  #phiS
log(p[8]))  #phiI
}
invtrans=function(p){
c(exp(p[1]),  #beta
exp(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
expit(p[6]),#rho
exp(p[7]),  #phiS
exp(p[8]))  #phiI
}
#prior means
pbeta<-log(1.25e-07)
pgamma<-log(.1)
palpha1<-0
palpha2<-0
palpha0<--8
prho<-logit(.0008)
pphiS<-log(PopSize/2)
pphiI<-log(PopSize/10)
pmean=c(pbeta,pgamma,palpha0,palpha1,palpha2,prho,pphiS,pphiI)
#prior standard deviations
psd=c(5,    #beta
.09,  #gamma
5,    #alpha0
5,    #alpha1
5,    #alpha2
2,    #rho
.1,   #phiS
.5)   #phiI
constParIndex<-1:2
alphasIndex<-3:5
rhoIndex<-6
startmeansIndex<-7:8
burn = 1000
prelim = 5000
iters =100000
thin =10
tune=.85
psigma<-diag(c(0.00002, #beta
0.00002, #gamma
0.002,   #alpha0
0.02,    #alpha1
0.02,    #alpha2
0.0002,  #rho
0.02,    #phiS
0.02))   #phiI
th=c(
beta=1.25e-09,
gamma=.11,
alpha0=-7,
alpha1=1,
alpha2=-1,
rho=.00003,
phiS=PopSize*.5,
phiI=PopSize*.2)
ll=-50000
bayessir(resultspath,deltavalue,critical,PopSize,theMU,numParticles,
COVMATP1,COVMATP2,obscholP1,obscholP2,obsdaysP1,obsdaysP2,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma)
library(bayessir)
library(bayessir, lib.loc="~/local/lib/R")
resultspath<-getwd()
deltavalue=1
critical=5
numParticles=100
PopSize=150000
theMU=.0009
#load the data
data(COVMATP1)
data(COVMATP2)
data(obscholP1)
data(obscholP2)
data(obsdaysP1)
data(obsdaysP2)
trans=function(p){
c(log(p[1]),  #beta
log(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
logit(p[6]),#rho
log(p[7]),  #phiS
log(p[8]))  #phiI
}
invtrans=function(p){
c(exp(p[1]),  #beta
exp(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
p[5],       #alpha2
expit(p[6]),#rho
exp(p[7]),  #phiS
exp(p[8]))  #phiI
}
#prior means
pbeta<-log(1.25e-07)
pgamma<-log(.1)
palpha1<-0
palpha2<-0
palpha0<--8
prho<-logit(.0008)
pphiS<-log(PopSize/2)
pphiI<-log(PopSize/10)
pmean=c(pbeta,pgamma,palpha0,palpha1,palpha2,prho,pphiS,pphiI)
#prior standard deviations
psd=c(5,    #beta
.09,  #gamma
5,    #alpha0
5,    #alpha1
5,    #alpha2
2,    #rho
.1,   #phiS
.5)   #phiI
constParIndex<-1:2
alphasIndex<-3:5
rhoIndex<-6
startmeansIndex<-7:8
burn = 1000
prelim = 5000
iters =100000
thin =10
tune=.85
psigma<-diag(c(0.00002, #beta
0.00002, #gamma
0.002,   #alpha0
0.02,    #alpha1
0.02,    #alpha2
0.0002,  #rho
0.02,    #phiS
0.02))   #phiI
th=c(
beta=1.25e-09,
gamma=.11,
alpha0=-7,
alpha1=1,
alpha2=-1,
rho=.00003,
phiS=PopSize*.5,
phiI=PopSize*.2)
ll=-50000
bayessir(resultspath,deltavalue,critical,PopSize,theMU,numParticles,
COVMATP1,COVMATP2,obscholP1,obscholP2,obsdaysP1,obsdaysP2,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma)
burn = 0
prelim = 1
iters =10
thin =1
tune=.85
psigma<-diag(c(0.00002, #beta
0.00002, #gamma
0.002,   #alpha0
0.02,    #alpha1
0.02,    #alpha2
0.0002,  #rho
0.02,    #phiS
0.02))   #phiI
th=c(
beta=1.25e-09,
gamma=.11,
alpha0=-7,
alpha1=1,
alpha2=-1,
rho=.00003,
phiS=PopSize*.5,
phiI=PopSize*.2)
ll=-50000
bayessir(resultspath,deltavalue,critical,PopSize,theMU,numParticles,
COVMATP1,COVMATP2,obscholP1,obscholP2,obsdaysP1,obsdaysP2,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma)
burn = 0
prelim = 10
iters =10
thin =1
tune=.85
psigma<-diag(c(0.00002, #beta
0.00002, #gamma
0.002,   #alpha0
0.02,    #alpha1
0.02,    #alpha2
0.0002,  #rho
0.02,    #phiS
0.02))   #phiI
th=c(
beta=1.25e-09,
gamma=.11,
alpha0=-7,
alpha1=1,
alpha2=-1,
rho=.00003,
phiS=PopSize*.5,
phiI=PopSize*.2)
ll=-50000
bayessir(resultspath,deltavalue,critical,PopSize,theMU,numParticles,
COVMATP1,COVMATP2,obscholP1,obscholP2,obsdaysP1,obsdaysP2,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma)
}
library(bayessir)
library(bayessir, lib.loc=~/local/lib/R)
library(bayessir, lib.loc=~/local/lib/R"")
library(bayessir, lib.loc="~/local/lib/R"")
)
""
library(bayessir, lib.loc="~/local/lib/R")
resultspath<-getwd()
deltavalue=1
critical=10
numParticles=100
#Set the population size for inference
PopSize=150000
#Set the rate immunity is lost
theMU=.0009
theseed=13
# simulate the data
SimTimes=seq(0,365*3, by=14)
int<- -7
A<- 3.5
wave<-pi/(365/2)
t<-0:(max(SimTimes))
alpha<-exp(int+A*sin(wave*t))
sincov<-sin(wave*t)
pop=150000
phiS=pop*.22
phiI=pop*.005
rep=365*4
th1=1.25e-08
th2=0.1
rho=.0008
set.seed(10)
sus0=rpois(1,phiS)
inf0=rpois(1,phiI)
shortstart<-as.matrix(c(sus0,inf0))
allcovs<-enviforce(as.matrix(c(sincov)),SimTimes,c(int,A))
simstates<-matrix(NA,nrow=(length(SimTimes)),ncol=2)
simstates[1,]<-shortstart
for (i in 2:length(SimTimes)){
simstates[i,]<-inhomoSIRSGillespie(simstates[i-1,],pop,SimTimes[i-1],SimTimes[i]-SimTimes[i-1],
c(th1,th2,theMU),allcovs[[i-1]][,2],allcovs[[i-1]][,1])
}
SimData<-c()
for(i in 1:dim(simstates)[1]) SimData[i]<-rbinom(1,simstates[i,2],rho)
COVMATLIST=list(as.matrix(c(sincov)))
obscholLIST=list(SimData)
obsdaysLIST=list(SimTimes)
##
trans=function(p){
c(log(p[1]),  #beta
log(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
logit(p[5]),#rho
log(p[6]),  #phiS
log(p[7]))  #phiI
}
invtrans=function(p){
c(exp(p[1]),  #beta
exp(p[2]),  #gamma
p[3],       #alpha0
p[4],       #alpha1
expit(p[5]),#rho
exp(p[6]),  #phiS
exp(p[7]))  #phiI
}
#prior means
pbeta<-log(.000001)
pgamma<-log(.1)
palpha0<-log(.000001)
palpha1<-0
prho<-logit(.0001)
pphiS<-log(phiS*1.1)
pphiI<-log(phiI*1.1)
pmean=c(pbeta,pgamma,palpha0,palpha1,prho,pphiS,pphiI)
#prior standard deviations
psd=c(5,  #beta
.09,#gamma
5,  #alpha0
5,  #alpha1
2,  #rho
.1, #phiS
.5) #phiI
constParIndex<-1:2
alphasIndex<-3:4
rhoIndex<-5
startmeansIndex<-6:7
# Iterations set small for example purposes; increase for applications
burn = 0
prelim = 10
iters =10
thin =1
tune=1
psigma<-diag(c(0.003, #beta
0.003, #gamma
0.030, #alpha0
0.030, #alpha1
0.030, #rho
0.030, #phiS
0.030)) #phiI
#start values
#Names of th input are used for the column names in the matrix output
set.seed(theseed)
th=c(
beta=abs(rnorm(1,th1,th1/3)),
gamma=abs(rnorm(1,th2,th2/10)),
alpha0=rnorm(1,int,1),
alpha1=rnorm(1,A,1),
rho=abs(rnorm(1,rho,rho)),
phiS=.5*PopSize,
phiI=.1*PopSize)
ll=-50000
bayessirOUT=bayessir(obscholLIST,obsdaysLIST,COVMATLIST,
th,trans,invtrans,pmean,psd,constParIndex,alphasIndex,rhoIndex,startmeansIndex,
burn,prelim,iters,thin,tune,ll,psigma,
deltavalue,critical,PopSize,theMU,numParticles,resultspath)
#Output columns are posterior samples for parameters in th, in addition to the log-likelihood and accepted values of the hidden states susT and infT at the final observation time T
#Posterior histograms for parameter values
nvars=dim(bayessirOUT)[2]
par(mfrow=c(1,nvars-3))
for(i in 1:(nvars-3)) hist(bayessirOUT[,i],main="",xlab=colnames(bayessirOUT)[i])
#Trace plots for all output
par(mfrow=c(1,nvars))
for(i in 1:(nvars)) plot(ts(bayessirOUT[,i]),xlab=colnames(bayessirOUT)[i],ylab="")
#Posterior histograms for parameter values
nvars=dim(bayessirOUT)[2]
par(mfrow=c(1,nvars-3))
for(i in 1:(nvars-3)) hist(bayessirOUT[,i],main="",xlab=colnames(bayessirOUT)[i])
#Trace plots for all output
par(mfrow=c(1,nvars))
for(i in 1:(nvars)) plot(ts(bayessirOUT[,i]),xlab=colnames(bayessirOUT)[i],ylab="")
#Posterior histograms for parameter values
nvars=dim(bayessirOUT)[2]
par(mfrow=c(1,nvars-3))
for(i in 1:(nvars-3)) hist(bayessirOUT[,i],main="",xlab=colnames(bayessirOUT)[i])
install.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(devtools)
install_github("bayessir")
?install_github
install_github("vminin/bayessir")
install_github("vminin/bayessir")
install_github("vminin/bayessir")
install_github("vminin/bayessir")
install_github("vnminin/bayessir")
sqrt(800)/2
sqrt(550)/2
install_github("phylodyn", username="mdkarcher")
# Package invocation, only needs to be done once per R session
library("phylodyn")
traj = logistic_traj
traj_inv = logistic_traj_inv
logistic_traj
traj_inv
# Generate a sampling schedule
s_times = c(0, sort(runif(40, 0, 12)))
nsamp = c(10, rep(1, 40))
sample = cbind(nsamp, s_times)
s_times
sample
# Generate a genealogy using the coalescent
gene = coalgen_thinning_hetero(sample=sample, trajectory=traj_inv)
gene
traj
# Run INLA on the data
args = gen_INLA_args(coal_times=cumsum(gene$intercoal_times), s_times=s_times, n_sampled=nsamp)
res = calculate.moller.hetero(args$coal_factor, args$s, args$event,300,0.01,0.01)
# Plot the results
plot_INLA(res, traj)
# Plot the results
plot_INLA(res, traj)
# Initialize the likelihood calculator
grid_max = 150
by=0.1
grid = seq(0, grid_max, by=by)
midpoints = seq(0 + by/2, grid_max - by/2, by=by)
init = coal_lik_init(samp_times=s_times, n_sampled=nsamp, coal_times=cumsum(gene$intercoal_times), grid=grid)
# Calculate the (log)likelihood value of the truth
N = traj(midpoints)
coal_lik_eval(init, N)
coal_lik_eval(init, N, log=FALSE)
# Calculate the (log)likelihood of a flat population
N = rep(55, length(midpoints))
coal_lik_eval(init, N)
coal_lik_eval(init, N, log=FALSE)
init
names(init)
2000*1.075
150/12
3500*1.075
262/12
10^3.7
